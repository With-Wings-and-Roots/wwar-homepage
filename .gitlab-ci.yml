stages:
  - build
  - deploy

build_api:
  image: docker:dind
  stage: build
  services:
    - docker:dind
  before_script:
    - apk add --update jq
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
  script:
    # :latest for branch main, it reflects the current staging environment, is not considered for production use
    # :unstable current state of development branch, merged the latest features, not even on staging
    # :stable /:$version for branches following the pattern release/X.X.X, considered for production use
    # :$CI_COMMIT_REF_SLUG for branches following the pattern feature/$feature_name
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        cp .env.ci.staging .env
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
        docker build --pull -t "$CI_REGISTRY_IMAGE:latest" .
        docker push "$CI_REGISTRY_IMAGE:latest"
      elif [[ "$CI_COMMIT_BRANCH" == "development" ]]; then
        tag=":unstable"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"

        docker build --pull -t "$CI_REGISTRY_IMAGE/apiv2${tag}" .
        docker push "$CI_REGISTRY_IMAGE/apiv2${tag}"
      elif [[ "$CI_COMMIT_BRANCH" =~ "^(release)\/[0-9._-]+$" ]]; then
        cp .env.ci.prod .env
        tag=":$CI_COMMIT_REF_SLUG"
        tag="${tag//release-/}"
        tag="${tag//-/.}"
        echo "Running on release branch '$CI_COMMIT_BRANCH': tag = $tag"
        docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
        docker tag $CI_REGISTRY_IMAGE${tag} $CI_REGISTRY_IMAGE:stable
        echo "pushing $CI_REGISTRY_IMAGE${tag}"
        docker push "$CI_REGISTRY_IMAGE${tag}"
        echo "pushing $CI_REGISTRY_IMAGE:stable"
        docker push "$CI_REGISTRY_IMAGE:stable"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
        docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
        docker push "$CI_REGISTRY_IMAGE${tag}"
      fi
    - cat .env
  when: always

deploy:
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh root@$REMOTE_HOST "cd /opt/docker && docker-compose down && docker-compose pull && docker-compose up"
  environment: staging
  only:
    - main
